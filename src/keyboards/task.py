from __future__ import annotations
from typing import List, Dict, Optional

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


# -------- –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π --------
def task_actions(task_id: int, is_archived: bool = False) -> InlineKeyboardMarkup:
    buttons = [
        InlineKeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"task_update:{task_id}"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"task_delete:{task_id}"),
    ]
    if is_archived:
        buttons.append(InlineKeyboardButton(text="‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"task_restore:{task_id}"))
    else:
        buttons.append(InlineKeyboardButton(text="üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"task_archive:{task_id}"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


# -------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è --------
def priority_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="1 ‚¨áÔ∏è –ù–∏–∑–∫–∏–π", callback_data="prio:low"),
            InlineKeyboardButton(text="2 ‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data="prio:medium"),
        ],
        [
            InlineKeyboardButton(text="3 ‚¨ÜÔ∏è –í—ã—Å–æ–∫–∏–π", callback_data="prio:high"),
            InlineKeyboardButton(text="4 üî• –°—Ä–æ—á–Ω—ã–π", callback_data="prio:urgent"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def due_quick_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="due:today"),
            InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="due:tomorrow"),
            InlineKeyboardButton(text="+3 –¥–Ω—è", callback_data="due:+3"),
        ],
        [InlineKeyboardButton(text="–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="due:none")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# -------- –ú–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è --------
def edit_menu_keyboard(
    task_id: int,
    title: Optional[str] = None,
    priority_human: Optional[str] = None,
    due_human: Optional[str] = None,
    category_name: Optional[str] = None,
) -> InlineKeyboardMarkup:
    t_title = f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫{f': {title}' if title else ''}"
    t_desc = "‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ"
    t_prio = f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç{f': {priority_human}' if priority_human else ''}"
    t_due = f"‚è∞ –î–µ–¥–ª–∞–π–Ω{f': {due_human}' if due_human else ''}"
    t_cat = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è{f': {category_name}' if category_name else ''}"

    rows = [
        [
            InlineKeyboardButton(text=t_title, callback_data=f"edit:title:{task_id}"),
            InlineKeyboardButton(text=t_desc, callback_data=f"edit:desc:{task_id}"),
        ],
        [
            InlineKeyboardButton(text=t_prio, callback_data=f"edit:prio:{task_id}"),
            InlineKeyboardButton(text=t_due, callback_data=f"edit:due:{task_id}"),
        ],
        [
            InlineKeyboardButton(text=t_cat, callback_data=f"edit:cat:{task_id}"),
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit:back:{task_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit:cancel:{task_id}"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def priority_keyboard_for_task(task_id: int) -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="1 ‚¨áÔ∏è –ù–∏–∑–∫–∏–π", callback_data=f"eprio:{task_id}:low"),
            InlineKeyboardButton(text="2 ‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data=f"eprio:{task_id}:medium"),
        ],
        [
            InlineKeyboardButton(text="3 ‚¨ÜÔ∏è –í—ã—Å–æ–∫–∏–π", callback_data=f"eprio:{task_id}:high"),
            InlineKeyboardButton(text="4 üî• –°—Ä–æ—á–Ω—ã–π", callback_data=f"eprio:{task_id}:urgent"),
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit:menu:{task_id}")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def due_quick_keyboard_for_task(task_id: int) -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"edue:{task_id}:today"),
            InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"edue:{task_id}:tomorrow"),
            InlineKeyboardButton(text="+3 –¥–Ω—è", callback_data=f"edue:{task_id}:+3"),
        ],
        [
            InlineKeyboardButton(text="–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data=f"edue:{task_id}:none"),
            InlineKeyboardButton(text="üóì –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data=f"edue:{task_id}:manual"),
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit:menu:{task_id}")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# -------- –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --------
def _paginate(items: List[Dict], page: int, size: int) -> List[Dict]:
    start = page * size
    end = start + size
    return items[start:end]


def categories_keyboard_for_task(
    task_id: int,
    categories: List[Dict],
    page: int = 0,
    page_size: int = 6,
) -> InlineKeyboardMarkup:
    page_items = _paginate(categories, page, page_size)
    rows = []
    for c in page_items:
        rows.append(
            [InlineKeyboardButton(text=c.get("name", "‚Äî"), callback_data=f"ecat:{task_id}:set:{c.get('id')}")]
        )

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"ecat:{task_id}:page:{page-1}"))
    if (page + 1) * page_size < len(categories):
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥", callback_data=f"ecat:{task_id}:page:{page+1}"))
    if nav:
        rows.append(nav)

    rows.append(
        [
            InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"ecat:{task_id}:none"),
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit:menu:{task_id}"),
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=rows)


def categories_keyboard_for_create(
    categories: List[Dict],
    page: int = 0,
    page_size: int = 6,
) -> InlineKeyboardMarkup:
    page_items = _paginate(categories, page, page_size)
    rows = []
    for c in page_items:
        rows.append([InlineKeyboardButton(text=c.get("name", "‚Äî"), callback_data=f"ccat:set:{c.get('id')}")])

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"ccat:page:{page-1}"))
    if (page + 1) * page_size < len(categories):
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥", callback_data=f"ccat:page:{page+1}"))
    if nav:
        rows.append(nav)

    rows.append(
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="ccat:skip"),
            InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="ccat:none"),
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=rows)
