from typing import List, Dict, Optional

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


# ==== –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π ====

def task_actions(task_id: int, is_archived: bool = False, status: Optional[str] = None) -> InlineKeyboardMarkup:
    """
    –î–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π.
    - –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª.
    - –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ¬´‚Ü©Ô∏è –í —Ä–∞–±–æ—Ç—É¬ª –∏ ¬´üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å¬ª.
    - –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ¬´‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å¬ª.
    """
    row1 = [InlineKeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"task_update:{task_id}")]

    if not is_archived:
        if status == "done":
            row1.append(InlineKeyboardButton(text="‚Ü©Ô∏è –í —Ä–∞–±–æ—Ç—É", callback_data=f"task_reopen:{task_id}"))
            row1.append(InlineKeyboardButton(text="üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"task_archive:{task_id}"))
        else:
            row1.append(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"task_done:{task_id}"))
    else:
        row1.append(InlineKeyboardButton(text="‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"task_restore:{task_id}"))

    row2 = [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"task_delete:{task_id}")]
    return InlineKeyboardMarkup(inline_keyboard=[row1, row2])


# ==== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ====

def priority_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="1 ‚¨áÔ∏è –ù–∏–∑–∫–∏–π", callback_data="prio:low"),
            InlineKeyboardButton(text="2 ‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data="prio:medium"),
        ],
        [
            InlineKeyboardButton(text="3 ‚¨ÜÔ∏è –í—ã—Å–æ–∫–∏–π", callback_data="prio:high"),
            InlineKeyboardButton(text="4 üî• –°—Ä–æ—á–Ω—ã–π", callback_data="prio:urgent"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def due_quick_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="due:today"),
            InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="due:tomorrow"),
            InlineKeyboardButton(text="+3 –¥–Ω—è", callback_data="due:+3"),
        ],
        [InlineKeyboardButton(text="–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="due:none")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ==== –ú–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ====

def edit_menu_keyboard(task_id: int) -> InlineKeyboardMarkup:
    """
    –°—Ç–∞—Ç–∏—á–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∑–∞–¥–∞—á–∏.
    """
    rows = [
        [
            InlineKeyboardButton(text="üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data=f"edit:title:{task_id}"),
            InlineKeyboardButton(text="‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit:desc:{task_id}"),
        ],
        [
            InlineKeyboardButton(text="‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit:prio:{task_id}"),
            InlineKeyboardButton(text="‚è∞ –î–µ–¥–ª–∞–π–Ω", callback_data=f"edit:due:{task_id}"),
        ],
        [InlineKeyboardButton(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"edit:cat:{task_id}")],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit:back:{task_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit:cancel:{task_id}"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def priority_keyboard_for_task(task_id: int) -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="1 ‚¨áÔ∏è –ù–∏–∑–∫–∏–π", callback_data=f"eprio:{task_id}:low"),
            InlineKeyboardButton(text="2 ‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data=f"eprio:{task_id}:medium"),
        ],
        [
            InlineKeyboardButton(text="3 ‚¨ÜÔ∏è –í—ã—Å–æ–∫–∏–π", callback_data=f"eprio:{task_id}:high"),
            InlineKeyboardButton(text="4 üî• –°—Ä–æ—á–Ω—ã–π", callback_data=f"eprio:{task_id}:urgent"),
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit:menu:{task_id}")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def due_quick_keyboard_for_task(task_id: int) -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"edue:{task_id}:today"),
            InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"edue:{task_id}:tomorrow"),
            InlineKeyboardButton(text="+3 –¥–Ω—è", callback_data=f"edue:{task_id}:+3"),
        ],
        [
            InlineKeyboardButton(text="–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data=f"edue:{task_id}:none"),
            InlineKeyboardButton(text="üóì –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data=f"edue:{task_id}:manual"),
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit:menu:{task_id}")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ==== –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ====

def _paginate(items: List[Dict], page: int, size: int) -> List[Dict]:
    start = page * size
    end = start + size
    return items[start:end]


def categories_keyboard_for_task(
    task_id: int,
    categories: List[Dict],
    page: int = 0,
    page_size: int = 6,
) -> InlineKeyboardMarkup:
    """
    –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ ¬´Uncategorized¬ª —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–æ–≤.
    """
    page_items = _paginate(categories, page, page_size)
    rows = [
        [InlineKeyboardButton(text=c.get("name", "‚Äî"), callback_data=f"ecat:{task_id}:set:{c.get('id')}")]
        for c in page_items
    ]

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"ecat:{task_id}:page:{page-1}"))
    if (page + 1) * page_size < len(categories):
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥", callback_data=f"ecat:{task_id}:page:{page+1}"))
    if nav:
        rows.append(nav)

    rows.append(
        [
            InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"ecat:{task_id}:none"),
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit:menu:{task_id}"),
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=rows)


def categories_keyboard_for_create(
    categories: List[Dict],
    page: int = 0,
    page_size: int = 6,
) -> InlineKeyboardMarkup:
    """
    –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —à–∞–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ ¬´Uncategorized¬ª —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–æ–≤.
    """
    page_items = _paginate(categories, page, page_size)
    rows = [
        [InlineKeyboardButton(text=c.get("name", "‚Äî"), callback_data=f"ccat:set:{c.get('id')}")]
        for c in page_items
    ]

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"ccat:page:{page-1}"))
    if (page + 1) * page_size < len(categories):
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥", callback_data=f"ccat:page:{page+1}"))
    if nav:
        rows.append(nav)

    rows.append(
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="ccat:skip"),
            InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="ccat:none"),
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=rows)
