import httpx

from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from src.keyboards.task import task_actions
from src.database.redis_client import redis_client
from src.database.states import FSMState, UserState
from ..config import settings

router = Router()
API_URL = f"{settings.api_base_url}/api/v1"

# ----------------- LIST TASKS -----------------
@router.message(Command("tasks"))
async def list_tasks(message: Message):
    user_id = message.from_user.id
    token = await redis_client.get_user_token(user_id)
    if not token:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        return

    async with httpx.AsyncClient() as client:
        resp = await client.get(
            f"{API_URL}/tasks/",
            headers={"Authorization": f"Bearer {token}"}
        )

    if resp.status_code == 401:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        return
    elif resp.status_code != 200:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á.")
        return

    data = resp.json()
    tasks = data.get("tasks", [])

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üìù")
        return

    for t in tasks:
        if isinstance(t, dict):
            title = t.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            status = t.get("status", "unknown")
            priority = t.get("priority", "‚Äî")
            category = t.get("category", {}).get("name") if t.get("category") else "‚Äî"
            due_date = t.get("due_date")
            archived = t.get("archived", False)
            task_id = t.get("id")

            text = f"üìù {title}\n–°—Ç–∞—Ç—É—Å: {status}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
            if due_date:
                text += f"\n–î–µ–¥–ª–∞–π–Ω: {due_date}"

            await message.answer(text, reply_markup=task_actions(task_id, archived))
        else:
            await message.answer(f"üìù {t}")

# ----------------- CREATE TASK -----------------
@router.message(Command("create_task"))
async def task_create_start(message: Message):
    user_id = message.from_user.id
    await redis_client.set_fsm_step(user_id, FSMState.TASK_CREATE_TITLE)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")


# ----------------- STUB CALLBACKS -----------------
@router.callback_query(lambda c: c.data and c.data.startswith("task_delete:"))
async def task_delete_stub(callback: CallbackQuery):
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ ‚Äî  —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è.", show_alert=True)

@router.callback_query(lambda c: c.data and c.data.startswith("task_update:"))
async def task_update_stub(callback: CallbackQuery):
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è.", show_alert=True)

@router.callback_query(lambda c: c.data and c.data.startswith("task_archive:"))
async def task_archive_stub(callback: CallbackQuery):
    await callback.answer("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è.", show_alert=True)

@router.callback_query(lambda c: c.data and c.data.startswith("task_restore:"))
async def task_restore_stub(callback: CallbackQuery):
    await callback.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è.", show_alert=True)
