from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.keyboards.category import category_actions, categories_menu
from src.database.redis_client import redis_client
from src.services.http_client import client
from states import CategoryStates

router = Router()


# ----------------- LIST CATEGORIES -----------------
@router.message(Command("categories"))
async def list_categories(message: Message):
    user_id = message.from_user.id
    access = await redis_client.get_user_access_token(user_id)
    if not access:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ /login")
        return

    resp = await client.request(user_id, "GET", "/categories/")
    if resp.status_code != 200:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ /login")
        return

    categories = resp.json()
    if not categories:
        await message.answer(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞—Ç—å ‚Äî /newcategory",
            reply_markup=categories_menu()
        )
        return

    for cat in categories:
        name = cat.get("name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        if name == "Uncategorized":
            name = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        await message.answer(f"üìÅ {name}", reply_markup=category_actions(cat.get("id")))


# ----------------- CREATE CATEGORY -----------------
@router.message(Command("newcategory"))
async def newcategory_start(message: Message, state: FSMContext):
    await state.set_state(CategoryStates.create_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")


@router.message(CategoryStates.create_name)
async def newcategory_create(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        return

    access = await redis_client.get_user_access_token(user_id)
    if not access:
        await state.clear()
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ /login")
        return

    resp = await client.request(user_id, "POST", "/categories/", json={"name": name})
    if resp.status_code in (200, 201):
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ ‚Äî /categories")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()


# ----------------- DELETE CATEGORY -----------------
@router.callback_query(lambda c: c.data and c.data.startswith("category_delete:"))
async def category_delete(callback: CallbackQuery):
    user_id = callback.from_user.id
    cat_id = callback.data.split(":", 1)[1]

    access = await redis_client.get_user_access_token(user_id)
    if not access:
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ /login", show_alert=True)
        return

    resp = await client.request(user_id, "DELETE", f"/categories/{cat_id}")
    if resp.status_code in (200, 204):
        try:
            await callback.message.edit_text("üóë –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
        except Exception:
            await callback.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)


# ----------------- UPDATE CATEGORY -----------------
@router.callback_query(lambda c: c.data and c.data.startswith("category_update:"))
async def category_update_start(callback: CallbackQuery, state: FSMContext):
    cat_id = int(callback.data.split(":", 1)[1])
    await state.update_data(category_id=cat_id)
    await state.set_state(CategoryStates.update_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await callback.answer()


@router.message(CategoryStates.update_name)
async def category_update_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    access = await redis_client.get_user_access_token(user_id)
    if not access:
        await state.clear()
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ /login")
        return

    data = await state.get_data()
    cat_id = data.get("category_id")

    resp = await client.request(
        user_id,
        "PUT",
        f"/categories/{cat_id}",
        json={"name": name}
    )

    if resp.status_code in (200, 201):
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ ‚Äî /categories")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    await state.clear()
