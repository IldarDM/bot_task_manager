import re
import httpx

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from src.database.redis_client import redis_client, UserState
from src.database.statements import FSMState
from ..config import settings

router = Router()
API_URL = f"{settings.api_base_url}/api/v1"

EMAIL_REGEX = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w+$")
MIN_PASSWORD_LENGTH = 6

# ----------------- LOGIN -----------------
@router.message(Command("login"))
async def login_start(message: Message):
    user_id = message.from_user.id
    await redis_client.set_fsm_step(user_id, FSMState.LOGIN_EMAIL)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")


# ----------------- REGISTER -----------------
@router.message(Command("register"))
async def register_start(message: Message):
    user_id = message.from_user.id
    await redis_client.set_fsm_step(user_id, FSMState.REGISTER_EMAIL)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")


# ----------------- LOGOUT -----------------
@router.message(Command("logout"))
async def logout_handler(message: Message):
    user_id = message.from_user.id
    token = await redis_client.get_user_token(user_id)
    if not token:
        await message.answer("–í—ã –∏ —Ç–∞–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã üôÇ")
        return

    async with httpx.AsyncClient() as client:
        await client.post(
            f"{API_URL}/auth/logout",
            headers={"Authorization": f"Bearer {token}"}
        )

    await redis_client.delete_user_token(user_id)
    await redis_client.set_user_state(user_id, UserState.LOGGED_OUT)
    await message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")


# ----------------- FSM HANDLER -----------------
@router.message()
async def fsm_handler(message: Message):
    user_id = message.from_user.id
    step = await redis_client.get_fsm_step(user_id)
    text = message.text.strip()

    # --- LOGIN STEPS ---
    if step in [FSMState.LOGIN_EMAIL, FSMState.LOGIN_PASSWORD]:
        if step == FSMState.LOGIN_EMAIL:
            if not EMAIL_REGEX.match(text):
                await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            await redis_client.set_fsm_step(user_id, FSMState.LOGIN_PASSWORD)
            await redis_client.redis.set(f"user:{user_id}:login_email", text, ex=300)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return

        if step == FSMState.LOGIN_PASSWORD:
            password = text
            if len(password) < MIN_PASSWORD_LENGTH:
                await message.answer(f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º {MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            email = await redis_client.redis.get(f"user:{user_id}:login_email")
            if not email:
                await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ email –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /login")
                await redis_client.delete_fsm_step(user_id)
                return

            async with httpx.AsyncClient() as client:
                resp = await client.post(
                    f"{API_URL}/auth/login",
                    json={"email": email, "password": password}
                )

            if resp.status_code == 200:
                token = resp.json()["access_token"]
                await redis_client.set_user_token(user_id, token)
                await redis_client.set_user_state(user_id, UserState.LOGGED_IN)
                await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

            # –û—á–∏—Å—Ç–∫–∞ FSM
            await redis_client.delete_fsm_step(user_id)
            await redis_client.redis.delete(f"user:{user_id}:login_email")
            return

    # --- REGISTER STEPS ---
    if step in [FSMState.REGISTER_EMAIL, FSMState.REGISTER_PASSWORD, FSMState.REGISTER_PASSWORD_CONFIRM]:
        # –®–∞–≥ 1: email
        if step == FSMState.REGISTER_EMAIL:
            if not EMAIL_REGEX.match(text):
                await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            await redis_client.redis.set(f"user:{user_id}:register_email", text, ex=300)
            await redis_client.set_fsm_step(user_id, FSMState.REGISTER_PASSWORD)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤):")
            return

        # –®–∞–≥ 2: –ø–∞—Ä–æ–ª—å
        if step == FSMState.REGISTER_PASSWORD:
            if len(text) < MIN_PASSWORD_LENGTH:
                await message.answer(f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º {MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            await redis_client.redis.set(f"user:{user_id}:register_password", text, ex=300)
            await redis_client.set_fsm_step(user_id, FSMState.REGISTER_PASSWORD_CONFIRM)
            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return

        # –®–∞–≥ 3: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        if step == FSMState.REGISTER_PASSWORD_CONFIRM:
            password = await redis_client.redis.get(f"user:{user_id}:register_password")
            email = await redis_client.redis.get(f"user:{user_id}:register_email")

            if not email or not password:
                await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /register")
                await redis_client.delete_fsm_step(user_id)
                return

            if text != password:
                await message.answer("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ Telegram
            first_name = message.from_user.first_name or ""
            last_name = message.from_user.last_name or ""

            async with httpx.AsyncClient() as client:
                resp = await client.post(
                    f"{API_URL}/auth/register",
                    json={
                        "email": email,
                        "first_name": first_name,
                        "last_name": last_name,
                        "password": password
                    }
                )

            if resp.status_code == 201:
                await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ /login")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

            # –û—á–∏—Å—Ç–∫–∞ FSM –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await redis_client.delete_fsm_step(user_id)
            await redis_client.redis.delete(f"user:{user_id}:register_email")
            await redis_client.redis.delete(f"user:{user_id}:register_password")
            return
