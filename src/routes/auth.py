import re
import httpx

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.database.redis_client import redis_client
from src.database.states import UserState
from src.config import settings
from states import AuthStates

router = Router()
API_URL = f"{settings.api_base_url}/api/v1"
EMAIL_REGEX = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w+$")
MIN_PASSWORD_LENGTH = 6


# ----------------- LOGIN -----------------
@router.message(Command("login"))
async def login_start(message: Message, state: FSMContext):
    await state.set_state(AuthStates.login_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")


@router.message(AuthStates.login_email)
async def login_email(message: Message, state: FSMContext):
    if not EMAIL_REGEX.match(message.text or ""):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(email=(message.text or "").strip())
    await state.set_state(AuthStates.login_password)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(AuthStates.login_password)
async def login_password(message: Message, state: FSMContext):
    pwd = (message.text or "").strip()
    if len(pwd) < MIN_PASSWORD_LENGTH:
        await message.answer(f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º {MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = await state.get_data()
    email = data.get("email")
    async with httpx.AsyncClient() as client:
        resp = await client.post(f"{API_URL}/auth/login", json={"email": email, "password": pwd})
    if resp.status_code == 200:
        token = resp.json().get("access_token")
        await redis_client.set_user_token(message.from_user.id, token)
        await redis_client.set_user_state(message.from_user.id, UserState.LOGGED_IN)
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")


# ----------------- REGISTER -----------------
@router.message(Command("register"))
async def register_start(message: Message, state: FSMContext):
    await state.set_state(AuthStates.reg_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")


@router.message(AuthStates.reg_email)
async def register_email(message: Message, state: FSMContext):
    if not EMAIL_REGEX.match(message.text or ""):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(email=(message.text or "").strip())
    await state.set_state(AuthStates.reg_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤):")


@router.message(AuthStates.reg_password)
async def register_password(message: Message, state: FSMContext):
    pwd = (message.text or "").strip()
    if len(pwd) < MIN_PASSWORD_LENGTH:
        await message.answer(f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º {MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(password=pwd)
    await state.set_state(AuthStates.reg_password_confirm)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(AuthStates.reg_password_confirm)
async def register_password_confirm(message: Message, state: FSMContext):
    confirm = (message.text or "").strip()
    data = await state.get_data()
    email = data.get("email")
    pwd = data.get("password")
    if not email or not pwd:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /register")
        await state.clear()
        return
    if confirm != pwd:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f"{API_URL}/auth/register",
            json={"email": email, "first_name": first_name, "last_name": last_name, "password": pwd}
        )
    if resp.status_code == 201:
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ /login")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()


# ----------------- LOGOUT -----------------
@router.message(Command("logout"))
async def logout_handler(message: Message):
    user_id = message.from_user.id
    token = await redis_client.get_user_token(user_id)
    if not token:
        await message.answer("–í—ã –∏ —Ç–∞–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã üôÇ")
        return

    async with httpx.AsyncClient() as client:
        await client.post(
            f"{API_URL}/auth/logout",
            headers={"Authorization": f"Bearer {token}"}
        )

    await redis_client.delete_user_token(user_id)
    await redis_client.set_user_state(user_id, UserState.LOGGED_OUT)
    await message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
