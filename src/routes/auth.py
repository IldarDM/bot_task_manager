import re
import httpx

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.database.redis_client import redis_client
from src.database.statements import UserState
from src.services.http_client import client
from .states import AuthStates
from src.keyboards.common import cancel_keyboard, auth_retry_keyboard

router = Router()
API_URL = "/api/v1"


EMAIL_REGEX = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w+$")
MIN_PASSWORD_LENGTH = 6


# ----------------- LOGIN -----------------
@router.message(Command("login"))
async def login_start(message: Message, state: FSMContext):
    await state.set_state(AuthStates.login_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:", reply_markup=cancel_keyboard())


@router.message(AuthStates.login_email)
async def login_email(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not EMAIL_REGEX.match(text):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_keyboard())
        return
    await state.update_data(email=text)
    await state.set_state(AuthStates.login_password)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=cancel_keyboard())


@router.message(AuthStates.login_password)
async def login_password(message: Message, state: FSMContext):
    pwd = (message.text or "").strip()
    if len(pwd) < MIN_PASSWORD_LENGTH:
        await message.answer(f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º {MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
                             reply_markup=cancel_keyboard())
        return
    data = await state.get_data()
    email = data.get("email")

    async with httpx.AsyncClient(base_url=API_URL, timeout=15.0) as c:
        resp = await c.post("/auth/login", json={"email": email, "password": pwd})

    if resp.status_code == 200:
        body = resp.json()
        access = body.get("access_token")
        refresh = body.get("refresh_token")
        if access and refresh:
            await redis_client.set_user_tokens(message.from_user.id, access, refresh)
            await redis_client.set_user_state(message.from_user.id, UserState.LOGGED_IN)
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            await state.clear()
        else:
            await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–¥–∞–ª —Ç–æ–∫–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=cancel_keyboard())
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=auth_retry_keyboard())


# ----------------- REGISTER (—Å –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–æ–º) -----------------
@router.message(Command("register"))
async def register_start(message: Message, state: FSMContext):
    await state.set_state(AuthStates.reg_email)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
        "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
        reply_markup=cancel_keyboard()
    )


@router.message(AuthStates.reg_email)
async def register_email(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not EMAIL_REGEX.match(text):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_keyboard())
        return
    await state.update_data(email=text)
    await state.set_state(AuthStates.reg_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=cancel_keyboard())


@router.message(AuthStates.reg_password)
async def register_password(message: Message, state: FSMContext):
    pwd = (message.text or "").strip()
    if len(pwd) < MIN_PASSWORD_LENGTH:
        await message.answer(f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º {MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
                             reply_markup=cancel_keyboard())
        return
    await state.update_data(password=pwd)
    await state.set_state(AuthStates.reg_password_confirm)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=cancel_keyboard())


@router.message(AuthStates.reg_password_confirm)
async def register_password_confirm(message: Message, state: FSMContext):
    confirm = (message.text or "").strip()
    data = await state.get_data()
    email = data.get("email")
    pwd = data.get("password")
    if not email or not pwd:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /register")
        await state.clear()
        return
    if confirm != pwd:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=cancel_keyboard())
        return

    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""

    async with httpx.AsyncClient(base_url=API_URL, timeout=15.0) as c:
        resp = await c.post(
            "/auth/register",
            json={"email": email, "first_name": first_name, "last_name": last_name, "password": pwd}
        )

    if resp.status_code != 201:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    async with httpx.AsyncClient(base_url=API_URL, timeout=15.0) as c:
        login_resp = await c.post("/auth/login", json={"email": email, "password": pwd})

    if login_resp.status_code == 200:
        body = login_resp.json()
        access = body.get("access_token")
        refresh = body.get("refresh_token")
        if access and refresh:
            await redis_client.set_user_tokens(message.from_user.id, access, refresh)
            await redis_client.set_user_state(message.from_user.id, UserState.LOGGED_IN)
            await message.answer("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –∏ –≤—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        else:
            await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–ª–æ–≥–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")
    else:
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ /login.")

    await state.clear()


# ----------------- ME (–ø—Ä–æ—Ñ–∏–ª—å) -----------------
@router.message(Command("me"))
async def me(message: Message):
    user_id = message.from_user.id
    resp = await client.request(user_id, "GET", "/auth/me")
    if resp.status_code == 200:
        data = resp.json() or {}
        email = data.get("email", "‚Äî")
        first = data.get("first_name", "‚Äî")
        last = data.get("last_name", "‚Äî")
        await message.answer(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\nEmail: <b>{email}</b>\n–ò–º—è: {first}\n–§–∞–º–∏–ª–∏—è: {last}"
        )
    elif resp.status_code in (401, 403):
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ----------------- LOGOUT -----------------
@router.message(Command("logout"))
async def logout_handler(message: Message):
    user_id = message.from_user.id
    access, refresh = await redis_client.get_user_tokens(user_id)
    if not access and not refresh:
        await message.answer("–í—ã –∏ —Ç–∞–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã üôÇ")
        return

    async with httpx.AsyncClient(base_url=API_URL, timeout=15.0) as c:
        await c.post(
            "/auth/logout",
            headers={"Authorization": f"Bearer {access}"} if access else {},
            json={"refresh_token": refresh} if refresh else None
        )

    await redis_client.delete_user_tokens(user_id)
    await redis_client.set_user_state(user_id, UserState.LOGGED_OUT)
    await message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
